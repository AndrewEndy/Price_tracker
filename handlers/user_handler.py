import asyncio
from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.types import ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from create_bot import admins, tg_db
from keyboards.reply_keyboard import main_kb
from keyboards.inline_keyboard import inline_kb_store, show_all_my_products, button_displaying_product
from db_hadlers.db_class import DatabaseBot
from utils.text_all_user_products import get_text_for_all_products, get_text_for_product



user_router = Router()


@user_router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    
    async with DatabaseBot(tg_db) as database:
        user_exists = await database.check_user(message.from_user.id)
        
        if not user_exists:
            await message.answer('–ü—Ä–∏–≤—ñ—Çüëã\n–í —Ü—å–æ–º—É –±–æ—Ç—ñ —Ç–∏ –º–æ–∂–µ—à –≤—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É–≤–∞—Ç–∏ —Ü—ñ–Ω–∏ –Ω–∞ —Å–≤–æ—ó —Ç–æ–≤–∞—Ä–∏ –≤ —Ä—ñ–∑–Ω–∏—Ö –æ–Ω–ª–∞–π–Ω –º–∞–≥–∞–∑–∏–Ω–∞—Öü§ë \
                                \n–ö–æ–ª–∏ –≤–æ–Ω–∏ –±—É–¥—É—Ç—å –ø–∞–¥–∞—Ç–∏ –∞–±–æ –ø—ñ–¥–Ω—ñ–º–∞—Ç–∏—Å—è –±–æ—Ç —Ç–µ–±–µ –ø—Ä–æ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–∏—Ç—åüëå', reply_markup=ReplyKeyboardRemove())
            await database.add_user(message.from_user.id, message.from_user.username)
    
    await message.answer(f'–û—Å—å –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é!', reply_markup=main_kb(message.from_user.id))
    
    
@user_router.message(F.text == 'üõç –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä')
async def cmd_add_new_product(message:Message):
    msg = await message.answer('–í–∏–±–µ—Ä—ñ—Ç—å –æ–Ω–ª–∞–π–Ω –º–∞–≥–∞–∑–∏üõí', reply_markup=ReplyKeyboardRemove())
    asyncio.sleep(0.1)
    await msg.delete()

    await message.answer(f'–í–∏–±–µ—Ä—ñ—Ç—å –æ–Ω–ª–∞–π–Ω –º–∞–≥–∞–∑–∏üõí', reply_markup=inline_kb_store())
    
    
# -----–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–æ—ó —Ç–æ–≤–∞—Ä–∏-----    

@user_router.message(F.text == 'üëÄ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–æ—ó —Ç–æ–≤–∞—Ä–∏')
async def cmd_my_products(message: Message):
    '''–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Ç–æ–≤–∞—Ä—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞'''
    async with DatabaseBot(tg_db) as database:
        products = await database.get_products(message.from_user.id) # [(id, tg_id, URL, name, store_name, price, min_price, max_price, state, currency)]
        
    if products:
        msg = await message.answer('–í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω –∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤', reply_markup=ReplyKeyboardRemove())
        asyncio.sleep(0.1)
        await msg.delete()

        await message.answer(f'–í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω –∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤', reply_markup=show_all_my_products(products))
    else:
        await message.answer(f'–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ–¥–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤üòî', reply_markup=main_kb(message.from_user.id))
    

@user_router.callback_query(F.data == 'show_all_products')
async def show_all_products(data: CallbackQuery):
    '''–•–µ–Ω–¥–ª–µ—Ä —è–∫–∏–π –≤–∏–≤–æ–¥–∏—Ç—å –≤—Å—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞'''
    
    await data.answer()
    await data.message.delete()
    
    async with DatabaseBot(tg_db) as database:
        products = await database.get_products(data.from_user.id)
        
    text = await get_text_for_all_products(products)
    
    await data.message.answer(text=text, reply_markup=main_kb(data.from_user.id))
    

@user_router.callback_query(F.data.startswith('product_'))
async def show_user_product(data: CallbackQuery):
    '''–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π —Ç–æ–≤–∞—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞'''
    await data.answer()
    await data.message.delete()
    
    product_id = int(data.data.replace('product_', ''))
    
    async with DatabaseBot(tg_db) as database:
        # [(id, tg_id, URL, name, store_name, price, min_price, max_price, state, currency)]
        product = await database.get_product_by_product_id(product_id, data.from_user.id)
        
    text = await get_text_for_product(product)
    
    await data.message.answer(text=text, reply_markup=button_displaying_product())
    
    
    
    
            


@user_router.message(F.text == '‚ùì –ü—Ä–æ –Ω–∞—Å')
async def cmd_about_us(message: Message):
    await message.answer(f'–ë–æ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –¥–ª—è —Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω—è–º –∑–∞ —Ü—ñ–Ω–∞–º–∏ –≤ —Ä—ñ–∑–Ω–∏—Ö –æ–Ω–ª–∞–π–Ω –º–∞–≥–∞–∑–∏–Ω–∞—Ö')
    await message.answer(f'–ë–æ—Ç –ø–æ–∫–∏ —â–æ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Å—Ç–∞–¥—ñ—ó —Ä–æ–∑—Ä–æ–±–∫–∏, —è–∫—â–æ –≤–∏ –∑–Ω–∞–π—à–ª–∏ —è–∫–∏—Å—å –±–∞–≥ –ø–æ–≤—ñ–¥–æ–º—Ç–µ –º–µ–Ω–µ –ø—Ä–æ —Ü–µ –±—É–¥—å –ª–∞—Å–∫–∞'
                         , reply_markup=main_kb(message.from_user.id))
    

@user_router.callback_query(F.data == 'back_home')
async def cmd_on_main(data: CallbackQuery, state: FSMContext):
    await state.clear()
    await data.answer()
    await data.message.delete()
    await data.message.answer(f'–û—Å—å –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é!', reply_markup=main_kb(data.from_user.id))
    
