

async def get_text_for_all_products(products: list) -> str:
    '''–§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –ø—Ä–æ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞'''
    
    text = '<b>–û—Å—å –≤—Å—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≤–∞—à—ñ —Ç–æ–≤–∞—Ä–∏</b>üßê:\n'
    
    # [(id, tg_id, URL, name, store_name, price, min_price, max_price, state, currency)] 
    for tupl in products:
        
        temp_str = f'''\nüõí<b>–ú–∞–≥–∞–∑–∏–Ω:</b> {tupl[4]}\nüìù<b>–ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä–∞:</b> {tupl[3]}\nüí∏<b>–¶—ñ–Ω–∞ –∑–∞—Ä–∞–∑:</b> {tupl[5]}{tupl[-1]}\n'''
        
        if tupl[5] != tupl[6]:
            temp_str+=f'üìâ<b>–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞:</b> {tupl[6]}{tupl[-1]}\n'
        
        if tupl[5] != tupl[7]:
            temp_str+=f'üìà<b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞:</b> {tupl[7]}{tupl[-1]}\n'
            
        if tupl[-2]:
            temp_str+=f'‚ùî<b>–°—Ç–∞—Ç—É—Å:</b> {tupl[-2]}\n'
        
        temp_str+='\n'
        
        text+=temp_str
        
    return text


async def get_text_for_product(product: list) -> str:
    '''–§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –ø—Ä–æ —Ç–æ–≤–∞—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞'''
    
    text = '<b>–û—Å—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ü–µ–π —Ç–æ–≤–∞—Ä</b>üßê:\n'
    
    # [(id, tg_id, URL, name, store_name, price, min_price, max_price, state, currency)] 
    for tupl in product:
        
        temp_str = f'''\nüõí<b>–ú–∞–≥–∞–∑–∏–Ω:</b> {tupl[4]}\nüìù<b>–ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä–∞:</b> {tupl[3]}\nüí∏<b>–¶—ñ–Ω–∞ –∑–∞—Ä–∞–∑:</b> {tupl[5]}{tupl[-1]}\n'''
        
        if tupl[5] != tupl[6]:
            temp_str+=f'üìâ<b>–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞:</b> {tupl[6]}{tupl[-1]}\n'
        
        if tupl[5] != tupl[7]:
            temp_str+=f'üìà<b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞:</b> {tupl[7]}{tupl[-1]}\n'
            
        if tupl[-2]:
            temp_str+=f'‚ùî<b>–°—Ç–∞—Ç—É—Å:</b> {tupl[-2]}\n'
            
        temp_str += f'üîó<b>–ü–æ—Å–∏–ª–∞–Ω–Ω—è: </b> {tupl[2]}\n'
        
        temp_str+='\n'
        
        text+=temp_str
        
    return text


async def get_update_data_text(product: list, new_data) -> str:
    '''–§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –∑ –æ–Ω–æ–≤–ª–µ–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏'''
    
    new_data = new_data[0]
    # [(id, tg_id, URL, name, store_name, price, min_price, max_price, state, currency)] 
     
    text = '<b>–û—Å—å –û–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ —Ç–æ–≤–∞—Ä—É</b>üôå:\n'
    
    text += f'\nüõí<b>–ú–∞–≥–∞–∑–∏–Ω:</b> {product[4]}\nüìù<b>–ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä–∞:</b> {product[3]}\n' #üí∏<b>–¶—ñ–Ω–∞ –∑–∞—Ä–∞–∑:</b> {tupl[5]}{tupl[-1]}\n
        
    if product[5] != new_data[5]:
        text += f'üí∏<b>–¶—ñ–Ω–∞ –∑–∞—Ä–∞–∑:</b> <s>{product[5]}{product[-1]}</s> ‚û°Ô∏è {new_data[5]}{new_data[-1]}\n'
    else:
        text += f'üí∏<b>–¶—ñ–Ω–∞ –∑–∞—Ä–∞–∑:</b> {new_data[5]}{new_data[-1]}\n'
    
    if product[6] != new_data[6]:
        text += f'üìâ<b>–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞:</b> <s>{product[6]}{product[-1]}</s> ‚û°Ô∏è {new_data[6]}{new_data[-1]}\n'
    else:
        text += f'üìâ<b>–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞:</b> {new_data[6]}{new_data[-1]}\n'
    
    if product[7] != new_data[7]:
        text += f'üìà<b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞:</b> <s>{product[7]}{product[-1]}</s> ‚û°Ô∏è {new_data[7]}{new_data[-1]}\n'
    else:
        text += f'üìà<b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞:</b> {new_data[7]}{new_data[-1]}\n'
        
    if product[-2] != new_data[-2]:
        text += f'‚ùî<b>–°—Ç–∞—Ç—É—Å:</b> <s>{product[-2]}</s> ‚û°Ô∏è {new_data[-2]}\n'
    else:
        text += f'‚ùî<b>–°—Ç–∞—Ç—É—Å:</b> {new_data[-2]}\n'
    
    if product[-1] != new_data[-1]:
        text += f'üíµ<b>–í–∞–ª—é—Ç–∞:</b> <s>{product[-1]}</s> ‚û°Ô∏è {new_data[-1]}\n'
    
    text += f'üîó<b>–ü–æ—Å–∏–ª–∞–Ω–Ω—è: </b> {new_data[2]}\n'
        
    text+='\n'
    
    return text